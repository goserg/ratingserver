//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UserPlayers = newUserPlayersTable("", "user_players", "")

type userPlayersTable struct {
	sqlite.Table

	// Columns
	UserID   sqlite.ColumnInteger
	PlayerID sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type UserPlayersTable struct {
	userPlayersTable

	EXCLUDED userPlayersTable
}

// AS creates new UserPlayersTable with assigned alias
func (a UserPlayersTable) AS(alias string) *UserPlayersTable {
	return newUserPlayersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserPlayersTable with assigned schema name
func (a UserPlayersTable) FromSchema(schemaName string) *UserPlayersTable {
	return newUserPlayersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserPlayersTable with assigned table prefix
func (a UserPlayersTable) WithPrefix(prefix string) *UserPlayersTable {
	return newUserPlayersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserPlayersTable with assigned table suffix
func (a UserPlayersTable) WithSuffix(suffix string) *UserPlayersTable {
	return newUserPlayersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserPlayersTable(schemaName, tableName, alias string) *UserPlayersTable {
	return &UserPlayersTable{
		userPlayersTable: newUserPlayersTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newUserPlayersTableImpl("", "excluded", ""),
	}
}

func newUserPlayersTableImpl(schemaName, tableName, alias string) userPlayersTable {
	var (
		UserIDColumn   = sqlite.IntegerColumn("user_id")
		PlayerIDColumn = sqlite.StringColumn("player_id")
		allColumns     = sqlite.ColumnList{UserIDColumn, PlayerIDColumn}
		mutableColumns = sqlite.ColumnList{PlayerIDColumn}
	)

	return userPlayersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:   UserIDColumn,
		PlayerID: PlayerIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
