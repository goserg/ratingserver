//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UserEvents = newUserEventsTable("", "user_events", "")

type userEventsTable struct {
	sqlite.Table

	//Columns
	UserID sqlite.ColumnInteger
	Event  sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type UserEventsTable struct {
	userEventsTable

	EXCLUDED userEventsTable
}

// AS creates new UserEventsTable with assigned alias
func (a UserEventsTable) AS(alias string) *UserEventsTable {
	return newUserEventsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserEventsTable with assigned schema name
func (a UserEventsTable) FromSchema(schemaName string) *UserEventsTable {
	return newUserEventsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserEventsTable with assigned table prefix
func (a UserEventsTable) WithPrefix(prefix string) *UserEventsTable {
	return newUserEventsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserEventsTable with assigned table suffix
func (a UserEventsTable) WithSuffix(suffix string) *UserEventsTable {
	return newUserEventsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserEventsTable(schemaName, tableName, alias string) *UserEventsTable {
	return &UserEventsTable{
		userEventsTable: newUserEventsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newUserEventsTableImpl("", "excluded", ""),
	}
}

func newUserEventsTableImpl(schemaName, tableName, alias string) userEventsTable {
	var (
		UserIDColumn   = sqlite.IntegerColumn("user_id")
		EventColumn    = sqlite.StringColumn("event")
		allColumns     = sqlite.ColumnList{UserIDColumn, EventColumn}
		mutableColumns = sqlite.ColumnList{}
	)

	return userEventsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID: UserIDColumn,
		Event:  EventColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
