package tgbot

import (
	"errors"
	mapset "github.com/deckarep/golang-set/v2"
	"ratingserver/bot/model"
	"ratingserver/internal/domain"
	"ratingserver/internal/service"
	"strconv"
	"strings"
	"time"
)

type InfoCommand struct {
	playerService *service.PlayerService
}

func (c *InfoCommand) Run(_ model.User, args string) (string, bool, error) {
	return c.processInfo(args)
}

func (c *InfoCommand) Help() string {
	return `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - /info –∏ –∏–º—è –∏–≥—Ä–æ–∫–∞.`
}

func (c *InfoCommand) processInfo(command string) (string, bool, error) {
	fields := strings.Fields(command)
	if len(fields) < 1 {
		return "", false, errors.New(`–ø–æ—Å–ª–µ /info –∏–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —ç—Ç–æ–º –∂–µ —Å–æ–æ—â–µ–Ω–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä "/info –¥–∂–æ–Ω"`)
	}
	player, err := c.playerService.GetByName(fields[0])
	if err != nil {
		return "", false, err
	}
	return printPlayer(player), false, nil
}

func printPlayer(player domain.Player) string {
	var buf strings.Builder
	buf.WriteString("ID: ")
	buf.WriteString(player.ID.String())
	buf.WriteString("\n")
	buf.WriteString("–ò–º—è: ")
	buf.WriteString(player.Name)
	buf.WriteString("\n")
	buf.WriteString("–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: ")
	buf.WriteString(prettifyRank(player))
	buf.WriteString("\n")
	buf.WriteString("–†–µ–π—Ç–∏–Ω–≥: ")
	buf.WriteString(strconv.Itoa(player.EloRating))
	buf.WriteString("\n")
	buf.WriteString("–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: ")
	buf.WriteString(strconv.Itoa(player.GamesPlayed))
	buf.WriteString("\n")
	buf.WriteString("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ")
	buf.WriteString(player.RegisteredAt.Format(time.RFC1123))
	return buf.String()
}

func prettifyRank(player domain.Player) string {
	if player.RatingRank == 1 {
		return "ü•á"
	}
	if player.RatingRank == 2 {
		return "ü•à"
	}
	if player.RatingRank == 3 {
		return "ü•â"
	}
	return strconv.Itoa(player.RatingRank)
}

func (c *InfoCommand) Permission() mapset.Set[model.UserRole] {
	return mapset.NewSet[model.UserRole](model.RoleAdmin, model.RoleModerator, model.RoleUser)
}
func (c *InfoCommand) Visibility() mapset.Set[model.UserRole] {
	return mapset.NewSet[model.UserRole](model.RoleAdmin, model.RoleModerator, model.RoleUser)
}
