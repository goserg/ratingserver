//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Log = newLogTable("public", "log", "")

type logTable struct {
	postgres.Table

	// Columns
	ID     postgres.ColumnInteger
	UserID postgres.ColumnString
	Action postgres.ColumnString
	Status postgres.ColumnString
	Time   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LogTable struct {
	logTable

	EXCLUDED logTable
}

// AS creates new LogTable with assigned alias
func (a LogTable) AS(alias string) *LogTable {
	return newLogTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LogTable with assigned schema name
func (a LogTable) FromSchema(schemaName string) *LogTable {
	return newLogTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LogTable with assigned table prefix
func (a LogTable) WithPrefix(prefix string) *LogTable {
	return newLogTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LogTable with assigned table suffix
func (a LogTable) WithSuffix(suffix string) *LogTable {
	return newLogTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLogTable(schemaName, tableName, alias string) *LogTable {
	return &LogTable{
		logTable: newLogTableImpl(schemaName, tableName, alias),
		EXCLUDED: newLogTableImpl("", "excluded", ""),
	}
}

func newLogTableImpl(schemaName, tableName, alias string) logTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		UserIDColumn   = postgres.StringColumn("user_id")
		ActionColumn   = postgres.StringColumn("action")
		StatusColumn   = postgres.StringColumn("status")
		TimeColumn     = postgres.TimestampzColumn("time")
		allColumns     = postgres.ColumnList{IDColumn, UserIDColumn, ActionColumn, StatusColumn, TimeColumn}
		mutableColumns = postgres.ColumnList{UserIDColumn, ActionColumn, StatusColumn, TimeColumn}
	)

	return logTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		UserID: UserIDColumn,
		Action: ActionColumn,
		Status: StatusColumn,
		Time:   TimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
